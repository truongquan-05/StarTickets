import { useEffect, useState } from "react";
import { Card, Form, Input, Button, message } from "antd";
import "./Profile.css";
import axios from "axios";

const ProfilePage = () => {
  const [form] = Form.useForm();
  const [passwordForm] = Form.useForm();
  const [user, setUser] = useState<any>(null);
  const [countdown, setCountdown] = useState(0);
  const handleSendCode = async () => {
    if (countdown > 0) return;

    // L·∫•y user t·ª´ localStorage
    const storedUser = localStorage.getItem("user");
    if (!storedUser) {
      message.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.");
      return;
    }

    const user = JSON.parse(storedUser);
    const userId = user.id;

    try {
      await axios.post(`http://localhost:8000/api/ma_xac_thuc/${userId}`);
      message.success(`M√£ x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ${user.email}`);
      setCountdown(60);
    } catch (error) {
      console.error(error);
      message.error("G·ª≠i m√£ th·∫•t b·∫°i!");
    }
  };

  useEffect(() => {
    let timer: number;
    if (countdown > 0) {
      timer = setInterval(() => {
        setCountdown((prev) => prev - 1);
      }, 1000);
    }
    return () => clearInterval(timer);
  }, [countdown]);

  useEffect(() => {
    const storedUser = localStorage.getItem("user");
    if (storedUser) {
      const parsedUser = JSON.parse(storedUser);
      setUser(parsedUser);

      // Set form default values
      form.setFieldsValue({
        ...parsedUser,
      });
    }
  }, [form]);

  const handleUpdateInfo = async (values: any) => {
    try {
      const storedUser = localStorage.getItem("user");
      if (!storedUser) {
        message.error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.");
        return;
      }

      const user = JSON.parse(storedUser);

      const payload = {
        ...values,
        id: user.id,
        email: user.email, // ƒë·ªÉ ƒë·∫£m b·∫£o email g·ª≠i ƒë√∫ng (n·∫øu kh√¥ng s·ª≠a)
      };

      await axios.put(
        `http://localhost:8000/api/nguoi_dung/${user.id}`,
        payload
      );

      // üîÅ G·ªôp user c≈© v·ªõi d·ªØ li·ªáu v·ª´a s·ª≠a
      const updatedUser = {
        ...user,
        ten: values.ten,
        so_dien_thoai: values.so_dien_thoai,
        email: values.email,
      };

      localStorage.setItem("user", JSON.stringify(updatedUser));
      setUser(updatedUser);
      form.resetFields();
      form.setFieldsValue(updatedUser);

      message.success("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
    } catch (error: any) {
      console.error(error);
      message.error(
        error?.response?.data?.error || "X√°c th·ª±c ho·∫∑c c·∫≠p nh·∫≠t th·∫•t b·∫°i!"
      );
    }
  };

  const handleChangePassword = async (values: any) => {
    const storedUser = localStorage.getItem("user");
    if (!storedUser) {
      message.error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.");
      return;
    }

    const user = JSON.parse(storedUser);

    try {
      await axios.put(
        `http://localhost:8000/api/nguoi_dung/${user.id}`,
        values
      );
      message.success("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
      passwordForm.resetFields();
    } catch (error: any) {
      console.error(error);
      message.error(error?.response?.data?.message || "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i!");
    }
  };

  if (!user) return <p>ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng...</p>;

  return (
    <div className="profile-container">
      <h2 className="title">üë§ TH√îNG TIN KH√ÅCH H√ÄNG</h2>

      <Card className="profile-card" bodyStyle={{ padding: 24 }}>
        <h3 className="section-title">Th√¥ng tin c√° nh√¢n</h3>
        <Form layout="vertical" form={form} onFinish={handleUpdateInfo}>
          <div className="form-row">
            <Form.Item label="H·ªç v√† t√™n" name="ten" className="form-item">
              <Input />
            </Form.Item>
          </div>
          <div className="form-row">
            <Form.Item
              label="S·ªë ƒëi·ªán tho·∫°i"
              name="so_dien_thoai"
              className="form-item"
            >
              <Input />
            </Form.Item>
            <Form.Item label="Email" name="email" className="form-item">
              <Input />
            </Form.Item>
          </div>

          <Form.Item label="M√£ x√°c nh·∫≠n" required>
            <Input.Group compact>
              <Form.Item
                name="ma_xac_nhan"
                noStyle
                rules={[
                  { required: true, message: "Vui l√≤ng nh·∫≠p m√£ x√°c nh·∫≠n!" },
                ]}
              >
                <Input style={{ width: "70%" }} />
              </Form.Item>
              <Button
                style={{ width: "30%" }}
                onClick={handleSendCode}
                disabled={countdown > 0}
              >
                {countdown > 0 ? `G·ª≠i l·∫°i (${countdown}s)` : "G·ª≠i m√£"}
              </Button>
            </Input.Group>
          </Form.Item>

          <Button type="primary" htmlType="submit" className="save-btn">
            L∆ØU TH√îNG TIN
          </Button>
        </Form>
      </Card>

      <Card className="profile-card" bodyStyle={{ padding: 24 }}>
        <h3 className="section-title">ƒê·ªïi m·∫≠t kh·∫©u</h3>
        <Form
          layout="vertical"
          form={passwordForm}
          onFinish={handleChangePassword}
        >
          <Form.Item
            label="M·∫≠t kh·∫©u c≈©"
            name="mat_khau_cu"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u c≈©!" },
              { min: 6, message: "M·∫≠t kh·∫©u t·ªëi thi·ªÉu 6 k√Ω t·ª±!" },
            ]}
          >
            <Input.Password />
          </Form.Item>

          <Form.Item
            label="M·∫≠t kh·∫©u m·ªõi"
            name="mat_khau_moi"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi!" },
              { min: 6, message: "M·∫≠t kh·∫©u t·ªëi thi·ªÉu 6 k√Ω t·ª±!" },
              ({ getFieldValue }) => ({
                validator(_, value) {
                  if (!value || getFieldValue("mat_khau_cu") !== value) {
                    return Promise.resolve();
                  }
                  return Promise.reject(
                    new Error("M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng m·∫≠t kh·∫©u c≈©!")
                  );
                },
              }),
            ]}
          >
            <Input.Password />
          </Form.Item>

          <Form.Item
            label="X√°c th·ª±c m·∫≠t kh·∫©u"
            name="xac_thuc_mat_khau"
            dependencies={["mat_khau_moi"]}
            rules={[
              { required: true, message: "Vui l√≤ng x√°c th·ª±c l·∫°i m·∫≠t kh·∫©u!" },
              ({ getFieldValue }) => ({
                validator(_, value) {
                  if (!value || getFieldValue("mat_khau_moi") === value) {
                    return Promise.resolve();
                  }
                  return Promise.reject(
                    new Error("X√°c th·ª±c m·∫≠t kh·∫©u kh√¥ng kh·ªõp!")
                  );
                },
              }),
            ]}
          >
            <Input.Password />
          </Form.Item>

          <Button type="primary" htmlType="submit" className="save-btn">
            ƒê·ªîI M·∫¨T KH·∫®U
          </Button>
        </Form>
      </Card>
    </div>
  );
};

export default ProfilePage;
